{"version":3,"sources":["../app/server.js"],"names":["info","app","name","db","connection","port","process","env","PORT","connect","options","on","log","error","message","disconnect","client","s","url","startsWith","once","enable","use","urlencoded","limit","extended","parameterLimit","json","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAA4C;;AAFhB;AAFJ;AAFQ;AAQhC,iBAAOA,IAAP,CAAY,eAAe,iBAAOC,GAAP,CAAWC,IAA1B,GAAiC,MAA7C,E,CAHyC;AAFP;AAFG;AAFP;;AAU9B,iBAAOF,IAAP,CAAY,qCAAqC,iBAAOG,EAAxD;;AAEA,IAAIA,KAAK,mBAASC,UAAlB;AACA,IAAIC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,iBAAOP,GAAP,CAAWI,IAA1C;;AAEA,mBAASI,OAAT,CAAiB,iBAAON,EAAxB,EAA4B,iBAAOO,OAAnC;;AAEAP,GAAGQ,EAAH,CAAM,YAAN,EAAoB,YAAY;AAC9B,mBAAOC,GAAP,CAAW,0BAAX;AACD,CAFD;;AAIAT,GAAGQ,EAAH,CAAM,OAAN,EAAe,UAAUE,KAAV,EAAiB;AAC9B,mBAAOA,KAAP,CAAa,+BAAb;AACA,mBAAOA,KAAP,CAAaA,MAAMC,OAAnB;AACA,qBAASC,UAAT;AACD,CAJD;;AAMAZ,GAAGQ,EAAH,CAAM,WAAN,EAAmB,YAAY;AAC7B,MAAIR,GAAGa,MAAH,CAAUC,CAAV,CAAYC,GAAZ,CAAgBC,UAAhB,CAA2B,aAA3B,CAAJ,EAA+C;AAC7ChB,OAAGA,EAAH,GAAQA,GAAGa,MAAH,CAAUb,EAAV,CAAa,QAAb,CAAR;AACD;AACD,mBAAOH,IAAP,CAAY,oBAAZ;AACD,CALD;;AAOAG,GAAGiB,IAAH,CAAQ,MAAR,EAAgB,YAAY;AAC1B,mBAAOpB,IAAP,CAAY,4BAAZ;AACD,CAFD;;AAIAG,GAAGQ,EAAH,CAAM,aAAN,EAAqB,YAAY;AAC/B,mBAAOX,IAAP,CAAY,sBAAZ;AACD,CAFD;;AAIAG,GAAGQ,EAAH,CAAM,cAAN,EAAsB,YAAY;AAChC,mBAAOX,IAAP,CAAY,uBAAZ;AACD,CAFD;;AAIA;AACA;AACA,IAAIC,MAAM,uBAAQE,EAAR,CAAV;;AAEAF,IAAIoB,MAAJ,CAAW,aAAX;;AAEA;AACApB,IAAIqB,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAACC,OAAO,MAAR,EAAgBC,UAAU,IAA1B,EAAgCC,gBAAgB,KAAhD,EAAtB,CAAR;AACAzB,IAAIqB,GAAJ,CAAQ,qBAAWK,IAAX,CAAgB,EAACH,OAAO,MAAR,EAAhB,CAAR;;AAEA;AACAvB,IAAIqB,GAAJ,CAAQ,qBAAR;;AAEA;AACArB,IAAIqB,GAAJ,CAAQ,MAAR;AACArB,IAAIqB,GAAJ,CAAQ,GAAR;;AAEA;AACA;AACArB,IAAI2B,MAAJ,CAAWvB,IAAX;;AAEA;AACA,iBAAOL,IAAP,CAAY,iBAAOC,GAAP,CAAWC,IAAX,GAAkB,sBAAlB,GAA2CG,IAAvD","file":"server.js","sourcesContent":["import express from 'express' // Load express\nimport mongoose from 'mongoose' // Load mongoose\nimport bodyParser from 'body-parser' // Load bodyParser\nimport cors from 'cors' // Load cors\nimport logger from './log/logger' // Load logger\nimport config from 'config' // Load config (environment)\nimport router from './routes/web.router' // Load root router\nimport apiRouter from './routes/api.router' // Load api router\n\nlogger.info('Starting: ' + config.app.name + '....');\nlogger.info('Connecting to MongoDB Instance: ' + config.db);\n\nlet db = mongoose.connection;\nlet port = process.env.PORT || config.app.port;\n\nmongoose.connect(config.db, config.options);\n\ndb.on('connecting', function () {\n  logger.log('connecting to MongoDB...')\n});\n\ndb.on('error', function (error) {\n  logger.error('Could not connect to MongoDB!');\n  logger.error(error.message);\n  mongoose.disconnect()\n});\n\ndb.on('connected', function () {\n  if (db.client.s.url.startsWith('mongodb+srv')) {\n    db.db = db.client.db('common')\n  }\n  logger.info('MongoDB connected!')\n});\n\ndb.once('open', function () {\n  logger.info('MongoDB connection opened!')\n});\n\ndb.on('reconnected', function () {\n  logger.info('MongoDB reconnected!')\n});\n\ndb.on('disconnected', function () {\n  logger.info('MongoDB disconnected!')\n});\n\n// Create the app\n// ============================================================================================\nlet app = express(db);\n\napp.enable('trust proxy');\n\n// Configure app to use bodyParser()\napp.use(bodyParser.urlencoded({limit: '50mb', extended: true, parameterLimit: 50000}));\napp.use(bodyParser.json({limit: '50mb'}));\n\n// Enable CORS on Express server instance\napp.use(cors());\n\n// Configure app routes\napp.use('/api', apiRouter);\napp.use('/', router);\n\n// Start the app by listening on <port>\n// ===========================================================================================\napp.listen(port);\n\n// Logging initialization\nlogger.info(config.app.name + ' listening on port: ' + port);\n"]}