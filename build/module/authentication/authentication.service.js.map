{"version":3,"sources":["../../../app/module/authentication/authentication.service.js"],"names":["appUtils","authenMongoose","usersMongoose","authenticationApi","rcvReq","callback","req","isBlank","get","genResponse","result","getAuthentication","dateNow","Date","now","userId","status","accessTime","getTime","timeout","updateLogin","_id","info","err","error","login","rcvBody","body","username","pwd","channel","undefined","res","getUserAndValidateLogin","user","getUserByUsername","isLocked","timeToUnlock","nowDT","reqParam","countLoginFailed","updateLoginStatus","debug","password","checkDuplicateLogin","vDateUnlock","setSeconds","getSeconds","userLockTime","vCount","userLoginAttempt","authenData","token","genToken","valid","deviceToken","deviceType","deviceId","authen","addAuthentication","accessToken","loginSocial","socialId","socialType","socialName","firstName","email","getUserByCriteria","updatedDate","createdDate","role","registerUser","logout","removeAuthentication"],"mappings":"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","file":"authentication.service.js","sourcesContent":["// authentication service\n\nimport logger from '../../log/logger' // Load logger\nimport * as appUtils from '../../utils/app-utils'\nimport * as authenMongoose from './authentication.mongoose'\nimport * as usersMongoose from '../user/users.mongoose'\nimport config from 'config'\n\nexport const authenticationApi = async (rcvReq, callback) => {\n  let req = rcvReq;\n  try {\n    if (appUtils.isBlank(req.get('dc-access-token')) || appUtils.isBlank(req.get('dc-user-id'))) {\n      callback(appUtils.genResponse(req.get('dc-language'), 'CM4090000', 'Invalid header'))\n    } else {\n      const result = await authenMongoose.getAuthentication(req, req.get('dc-access-token'));\n      let dateNow = Date.now();\n      if (result !== null && result.userId !== null) {\n        if (result.userId.status === 'ACTIVE') {\n          if (dateNow - result.accessTime.getTime() < config.timeout) {\n            await authenMongoose.updateLogin(req, result._id);\n            logger.info('Authorize success');\n            callback(null)\n          } else {\n            logger.info('Session has expired');\n            callback(appUtils.genResponse(req.get('dc-language'), 'CM4010003', 'Session has expired'))\n          }\n        } else {\n          logger.info('Unauthorized');\n          callback(appUtils.genResponse(req.get('dc-language'), 'CM4010001', 'Unauthorized'))\n        }\n      } else {\n        logger.info('Session is invalid');\n        callback(appUtils.genResponse(req.get('dc-language'), 'CM4010007', 'Session is invalid'))\n      }\n    }\n  } catch (err) {\n    logger.error('service login Unhandled Exception: ', err);\n    callback(appUtils.genResponse(req.get('dc-language'), 'CM5000000', err))\n  }\n};\n\n// login step : 0\nexport const login = async (req, callback) => {\n  let rcvBody = req.body;\n  try {\n    logger.info('rcvBody.username ==>', rcvBody.username);\n    logger.info('rcvBody.pwd ==> ', rcvBody.pwd);\n    logger.info('rcvBody.channel ==> ', rcvBody.channel);\n\n    // validate username & password : res user\n    if (rcvBody === undefined || appUtils.isBlank(rcvBody.username) || appUtils.isBlank(rcvBody.pwd) || appUtils.isBlank(rcvBody.channel)) {\n      callback(appUtils.genResponse(req.get('dc-language'), 'CM4090000', 'Invalid data'))\n    } else {\n      // next step get user Info\n      let res = await getUserAndValidateLogin(req, rcvBody);\n      callback(res)\n    }\n  } catch (err) {\n    logger.error('service login Unhandled Exception: ' + err);\n    callback(appUtils.genResponse(req.get('dc-language'), 'CM5000000', err))\n  }\n};\n\n// step : 1\nconst getUserAndValidateLogin = async (req, rcvBody) => {\n  try {\n    // get user\n    const user = await usersMongoose.getUserByUsername(req, rcvBody.username);\n    if (user === null) {\n      // user is not found\n      return appUtils.genResponse(req.get('dc-language'), 'CM4090006', 'User not found')\n    } else {\n\n      if (user.status !== \"ACTIVE\") {\n        logger.info('Unauthorized');\n        return appUtils.genResponse(req.get('dc-language'), 'CM4010001', 'Unauthorized')\n      }\n\n      // user is not null\n      let isLocked = true;\n\n      // case user lock\n      if (user.timeToUnlock !== undefined && user.timeToUnlock !== null) {\n        let nowDT = new Date();\n        // unlock\n        if (nowDT >= new Date(user.timeToUnlock)) {\n          let reqParam = {\n            '_id': user._id,\n            countLoginFailed: 0,\n            timeToUnlock: null\n          };\n\n          // update status\n          await usersMongoose.updateLoginStatus(req, reqParam);\n          user.countLoginFailed = 0;\n          isLocked = false\n        }\n      } else {\n        isLocked = false\n      }\n\n      logger.debug('IS ACCOUNT LOCKED >>>> ' + isLocked);\n\n      if (user.password === rcvBody.pwd) {\n        if (isLocked) {\n          return appUtils.genResponse(req.get('dc-language'), 'CM4090005', 'User Locked')\n        } else {\n          // If login fail > 0, clear ...\n          if (user.countLoginFailed && user.countLoginFailed > 0) {\n            let reqParam = {\n              '_id': user._id,\n              'countLoginFailed': 0,\n              'timeToUnlock': null\n            };\n            await usersMongoose.updateLoginStatus(req, reqParam)\n          }\n\n          return await checkDuplicateLogin(req, rcvBody, user)\n        }\n      } else {\n        if (isLocked) {\n          // update time to lock\n          let vDateUnlock = user.timeToUnlock;\n          vDateUnlock.setSeconds(user.timeToUnlock.getSeconds() + config.userLockTime);\n          let reqParam = {\n            '_id': user._id,\n            'countLoginFailed': user.countLoginFailed,\n            'timeToUnlock': vDateUnlock\n          };\n\n          await usersMongoose.updateLoginStatus(req, reqParam);\n          return appUtils.genResponse(req.get('dc-language'), 'CM4090005', 'User Locked')\n        } else {\n          let vCount = 0;\n          let vDateUnlock = null;\n\n          if (user.countLoginFailed) { // failed to login not first time\n            if (user.countLoginFailed < config.userLoginAttempt) {\n              vCount = user.countLoginFailed + 1;\n\n              if (vCount === config.userLoginAttempt) {\n                vDateUnlock = new Date();\n                vDateUnlock.setSeconds(vDateUnlock.getSeconds() + config.userLockTime)\n              }\n\n              let reqParam = {\n                '_id': user._id,\n                'countLoginFailed': vCount,\n                'timeToUnlock': vDateUnlock\n              };\n\n              await usersMongoose.updateLoginStatus(req, reqParam);\n              return appUtils.genResponse(req.get('dc-language'), 'CM4090006', 'Incorrect password')\n            } else { // failed to login on reset\n              let reqParam = {\n                _id: user._id,\n                'countLoginFailed': 1,\n                'timeToUnlock': null\n              };\n\n              await usersMongoose.updateLoginStatus(req, reqParam);\n              return appUtils.genResponse(req.get('dc-language'), 'CM4090006', 'Incorrect password')\n            }\n          } else { // failed to login on first time\n            let reqParam = {\n              _id: user._id,\n              'countLoginFailed': 1,\n              'timeToUnlock': null\n            };\n\n            await usersMongoose.updateLoginStatus(req, reqParam);\n            return appUtils.genResponse(req.get('dc-language'), 'CM4090006', 'Incorrect password')\n          }\n        }\n      }\n    }\n  } catch (err) {\n    logger.error('service getUserAndValidateLogin Unhandled Exception: ' + err);\n    return appUtils.genResponse(req.get('dc-language'), 'CM5000000', err)\n  }\n};\n\n// step : 2\nexport const checkDuplicateLogin = async (req, rcvBody, user) => {\n  try {\n    // check duplicate login\n\n    let authenData = {};\n    authenData.userId = user._id;\n    authenData.username = rcvBody.username;\n    authenData.token = appUtils.genToken();\n    authenData.channel = rcvBody.channel;\n    authenData.valid = true;\n    authenData.deviceToken = (rcvBody.deviceToken === undefined ? undefined : rcvBody.deviceToken);\n    authenData.deviceType = (rcvBody.deviceType === undefined ? undefined : rcvBody.deviceType);\n    authenData.deviceId = (rcvBody.deviceId === undefined ? undefined : rcvBody.deviceId);\n\n    const authen = await authenMongoose.addAuthentication(req, authenData);\n    return appUtils.genResponse(req.get('dc-language'), 'CM2000000', 'Login success', {user, accessToken: authen.token})\n  } catch (err) {\n    logger.error('service checkDuplicateLogin Unhandled Exception: ' + err);\n    return appUtils.genResponse(req.get('dc-language'), 'CM5000000', err)\n  }\n};\n\n// login social\nexport const loginSocial = async (req, callback) => {\n  let rcvBody = req.body;\n  try {\n    logger.info('rcvBody.socialId ==>', rcvBody.socialId);\n    logger.info('rcvBody.socialType ==> ', rcvBody.socialType);\n    logger.info('rcvBody.socialName ==> ', rcvBody.socialName);\n    logger.info('rcvBody.firstName ==> ', rcvBody.firstName);\n    logger.info('rcvBody.email ==> ', rcvBody.email);\n\n    // validate username & password : res user\n    if (!rcvBody || appUtils.isBlank(rcvBody.socialId) || appUtils.isBlank(rcvBody.socialType) || appUtils.isBlank(rcvBody.socialName)) {\n      callback(appUtils.genResponse(req.get('dc-language'), 'CM4090000', 'Invalid data'))\n    } else {\n      // next step get user Info\n      const user = await usersMongoose.getUserByCriteria(req, {socialId: rcvBody.socialId, socialType: rcvBody.socialType});\n      if (user === null) {\n        // user is not found\n        rcvBody.updatedDate = new Date();\n        rcvBody.createdDate = new Date();\n        rcvBody.status = \"ACTIVE\";\n        rcvBody.role = \"USER\";\n        let result = await usersMongoose.registerUser(req, rcvBody);\n        let res = await checkDuplicateLogin(req, rcvBody, result);\n        callback(res)\n      } else {\n        let res = await checkDuplicateLogin(req, rcvBody, user);\n        callback(res)\n      }\n    }\n  } catch (err) {\n    logger.error('service login Unhandled Exception: ' + err);\n    callback(appUtils.genResponse(req.get('dc-language'), 'CM5000000', err))\n  }\n};\n\n// logout\nexport const logout = async (req, callback) => {\n  let accessToken = req.get('dc-access-token');\n  try {\n    if (appUtils.isBlank(accessToken)) {\n      callback(appUtils.genResponse(req.get('dc-language'), 'CM4090000', 'invalidData'))\n    } else {\n      const res = await authenMongoose.getAuthentication(req, accessToken);\n      if (res !== null) {\n        await authenMongoose.removeAuthentication(req, req.get('dc-user-id'));\n        callback(appUtils.genResponse(req.get('dc-language'), 'CM2000000', 'Logout success'))\n      } else {\n        callback(appUtils.genResponse(req.get('dc-language'), 'CM4010000', 'Unknown token'))\n      }\n    }\n  } catch (err) {\n    logger.error('service logout Unhandled Exception: ' + err);\n    callback(appUtils.genResponse(req.get('dc-language'), 'CM5000000', err))\n  }\n};\n"]}