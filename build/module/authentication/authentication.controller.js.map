{"version":3,"sources":["../../../app/module/authentication/authentication.controller.js"],"names":["applicationUtils","service","login","req","res","logModel","setRequest","info","getAccessLog","response","setResponse","getInfoLog","status","httpCode","send","err","error","genResponse","get","loginSocial","logout","resCode","json"],"mappings":"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","file":"authentication.controller.js","sourcesContent":["import * as applicationUtils from '../../utils/app-utils'\nimport * as service from './authentication.service'\n\nimport logger from '../../log/logger'// Load logger\nimport loggerAccess from '../../log/logger-access'\nimport loggerInfo from '../../log/logger-info'\n\nimport {LogModel} from '../../log/log.model.js'\n\n// login\nexport const login = (req, res) => {\n  let logModel = new LogModel();\n  logModel.setRequest(req);\n  loggerAccess.info(logModel.getAccessLog());\n  try {\n    service.login(req, (response) => {\n      logModel.setResponse(response);\n      loggerInfo.info(logModel.getInfoLog());\n      return res.status(response.httpCode).send(response)\n    })\n  } catch (err) {\n    logger.error('login Unhandled Exception: ' + err);\n    let response = applicationUtils.genResponse(req.get('dc-language'), 'CM5000000', err);\n    logModel.setResponse(response);\n    loggerInfo.info(logModel.getInfoLog());\n    return res.status(response.httpCode).send(response)\n  }\n};\n\n// login social\nexport const loginSocial = (req, res) => {\n  let logModel = new LogModel();\n  logModel.setRequest(req);\n  loggerAccess.info(logModel.getAccessLog());\n  try {\n    service.loginSocial(req, (response) => {\n      logModel.setResponse(response);\n      loggerInfo.info(logModel.getInfoLog());\n      return res.status(response.httpCode).send(response)\n    })\n  } catch (err) {\n    logger.error('login Unhandled Exception: ' + err);\n    let response = applicationUtils.genResponse(req.get('dc-language'), 'CM5000000', err);\n    logModel.setResponse(response);\n    loggerInfo.info(logModel.getInfoLog());\n    return res.status(response.httpCode).send(response)\n  }\n};\n\n// logout\nexport const logout = (req, res) => {\n  let logModel = new LogModel();\n  logModel.setRequest(req);\n  loggerAccess.info(logModel.getAccessLog());\n  try {\n    service.logout(req, (response) => {\n      logModel.setResponse(response);\n      loggerInfo.info(logModel.getInfoLog());\n      if (response.resCode === 'CM2000000') {\n        res.json(response)\n      } else {\n        res.status(500).send(response)\n      }\n    })\n  } catch (err) {\n    logger.error('logout Unhandled Exception: ' + err);\n    let response = applicationUtils.genResponse(req.get('dc-language'), 'CM5000000', err);\n    logModel.setResponse(response);\n    loggerInfo.info(logModel.getInfoLog());\n    return res.status(response.httpCode).send(response)\n  }\n};\n"]}