{"version":3,"sources":["../../../app/module/authentication/authentication.mongoose.js"],"names":["addAuthentication","req","data","info","authenticationSchema","save","findDuplicateLogin","_id","channel","findOne","userId","valid","updateLogin","findOneAndUpdate","$set","accessTime","Date","now","new","removeAuthentication","remove","getAuthentication","accessToken","token","populate","lean","exec"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEO,IAAMA,gDAAoB,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,IAAN,EAAe;AAC9C,mBAAOC,IAAP,CAAY,4BAAZ;AACA,MAAIC,uBAAuB,6BAAyBF,IAAzB,CAA3B;AACA,SAAOE,qBAAqBC,IAArB,EAAP;AACD,CAJM;;AAMA,IAAMC,kDAAqB,SAArBA,kBAAqB,CAACL,GAAD,EAAMM,GAAN,EAAWC,OAAX,EAAuB;AACvD,mBAAOL,IAAP,CAAY,6BAAZ;AACA,SAAO,yBAAqBM,OAArB,CAA6B,EAACC,QAAQH,GAAT,EAAcI,OAAO,IAArB,EAA2BH,SAASA,OAApC,EAA7B,CAAP;AACD,CAHM;;AAKA,IAAMI,oCAAc,SAAdA,WAAc,CAACX,GAAD,EAAMM,GAAN,EAAc;AACvC,mBAAOJ,IAAP,CAAY,sBAAZ;AACA,SAAO,yBAAqBU,gBAArB,CAAsC,EAACN,KAAKA,GAAN,EAAWI,OAAO,IAAlB,EAAtC,EAA+D,EAACG,MAAM,EAACC,YAAYC,KAAKC,GAAL,EAAb,EAAP,EAA/D,EAAiG,EAACC,KAAK,IAAN,EAAjG,CAAP;AACD,CAHM;;AAKA,IAAMC,sDAAuB,SAAvBA,oBAAuB,CAAClB,GAAD,EAAMS,MAAN,EAAiB;AACnD,mBAAOP,IAAP,CAAY,+BAAZ;AACA,SAAO,yBAAqBiB,MAArB,CAA4B,EAACV,QAAQA,MAAT,EAA5B,CAAP;AACD,CAHM;;AAKA,IAAMW,gDAAoB,SAApBA,iBAAoB,CAACpB,GAAD,EAAMqB,WAAN,EAAsB;AACrD,mBAAOnB,IAAP,CAAY,4BAAZ;AACA,SAAO,yBAAqBM,OAArB,CAA6B,EAACc,OAAOD,WAAR,EAAqBX,OAAO,IAA5B,EAA7B,EAAgEa,QAAhE,CAAyE,QAAzE,EAAmFC,IAAnF,GAA0FC,IAA1F,EAAP;AACD,CAHM","file":"authentication.mongoose.js","sourcesContent":["import AuthenticationSchema from './authentication.model'\nimport logger from '../../log/logger'\n\nexport const addAuthentication = (req, data) => {\n  logger.info('mongoose addAuthentication')\n  let authenticationSchema = new AuthenticationSchema(data)\n  return authenticationSchema.save()\n}\n\nexport const findDuplicateLogin = (req, _id, channel) => {\n  logger.info('mongoose findDuplicateLogin')\n  return AuthenticationSchema.findOne({userId: _id, valid: true, channel: channel})\n}\n\nexport const updateLogin = (req, _id) => {\n  logger.info('mongoose updateLogin')\n  return AuthenticationSchema.findOneAndUpdate({_id: _id, valid: true}, {$set: {accessTime: Date.now()}}, {new: true})\n}\n\nexport const removeAuthentication = (req, userId) => {\n  logger.info('mongoose removeAuthentication')\n  return AuthenticationSchema.remove({userId: userId})\n}\n\nexport const getAuthentication = (req, accessToken) => {\n  logger.info('mongoose getAuthentication')\n  return AuthenticationSchema.findOne({token: accessToken, valid: true}).populate('userId').lean().exec()\n}\n"]}