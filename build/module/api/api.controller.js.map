{"version":3,"sources":["../../../app/module/api/api.controller.js"],"names":["applicationUtils","service","api","req","res","next","info","url","method","bypass","authentication","authenticationApi","response","logModel","setRequest","getAccessLog","setResponse","getInfoLog","status","httpCode","send","connectionStatus","connection","readyState","errMessage","error","genResponse","get","authorize"],"mappings":";;;;;;;AAAA;;;;AACA;;IAAYA,gB;;AACZ;;IAAYC,O;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AARgC;AASzB,IAAMC,oBAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,mBAAOC,IAAP,CAAY,0HAAZ;AACA,mBAAOA,IAAP,CAAY,qCAAqCH,IAAII,GAArD;AACA,mBAAOD,IAAP,CAAY,wCAAwCH,IAAIK,MAAxD;;AAEA,MAAIC,SAAWN,IAAII,GAAJ,KAAY,SAAZ,IAAyBJ,IAAIK,MAAJ,KAAe,MAAzC,IACXL,IAAII,GAAJ,KAAY,gBAAZ,IAAgCJ,IAAIK,MAAJ,KAAe,MADpC,IAEXL,IAAII,GAAJ,KAAY,gBAAZ,IAAgCJ,IAAIK,MAAJ,KAAe,KAFpC,IAGXL,IAAII,GAAJ,KAAY,gBAAZ,IAAgCJ,IAAIK,MAAJ,KAAe,MAHlD;;AAMA,MAAIE,iBAAiB,SAAjBA,cAAiB,GAAM;AACzB,QAAID,MAAJ,EAAY;AACVJ;AACD,KAFD,MAEO;AACLJ,cAAQU,iBAAR,CAA0BR,GAA1B,EAA+B,UAACS,QAAD,EAAc;AAC3C,YAAIA,QAAJ,EAAc;AACZ,cAAIC,WAAW,mBAAf;AACAA,mBAASC,UAAT,CAAoBX,GAApB;AACA,iCAAaG,IAAb,CAAkBO,SAASE,YAAT,EAAlB;AACAF,mBAASG,WAAT,CAAqBJ,QAArB;AACA,+BAAWN,IAAX,CAAgBO,SAASI,UAAT,EAAhB;AACAb,cAAIc,MAAJ,CAAWN,SAASO,QAApB,EAA8BC,IAA9B,CAAmCR,QAAnC;AACD,SAPD,MAOO;AACLP;AACD;AACF,OAXD;AAYD;AACF,GAjBD;;AAmBA,MAAIgB,mBAAmB,mBAASC,UAAT,CAAoBC,UAA3C;AACA,MAAIF,qBAAqB,CAAzB,EAA4B;AAC1B,QAAIG,aAAa,8BAAjB;AACA,qBAAOC,KAAP,CAAaD,UAAb;AACA;AACA,QAAIZ,WAAWZ,iBAAiB0B,WAAjB,CAA6BvB,IAAIwB,GAAJ,CAAQ,aAAR,CAA7B,EAAqD,WAArD,EAAkEH,UAAlE,CAAf;AACApB,QAAIc,MAAJ,CAAWN,SAASO,QAApB,EAA8BC,IAA9B,CAAmCR,QAAnC;AACD,GAND,MAMO;AACLF;AACD;AACF,CAxCM;;AA0CP;AAhDsC;AAiD/B,IAAMkB,gCAAY,SAAZA,SAAY,CAACzB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3C,MAAIQ,WAAW,mBAAf;AACAA,WAASC,UAAT,CAAoBX,GAApB;AACA,yBAAaG,IAAb,CAAkBO,SAASE,YAAT,EAAlB;AACA,MAAIH,WAAWZ,iBAAiB0B,WAAjB,CAA6BvB,IAAIwB,GAAJ,CAAQ,aAAR,CAA7B,EAAqD,WAArD,EAAkE,WAAlE,CAAf;AACAd,WAASG,WAAT,CAAqBJ,QAArB;AACA,uBAAWN,IAAX,CAAgBO,SAASI,UAAT,EAAhB;AACA,SAAOb,IAAIc,MAAJ,CAAWN,SAASO,QAApB,EAA8BC,IAA9B,CAAmCR,QAAnC,CAAP;AACD,CARM","file":"api.controller.js","sourcesContent":["import mongoose from 'mongoose' // Load mongoose\nimport * as applicationUtils from '../../utils/app-utils'\nimport * as service from '../authentication/authentication.service'\nimport logger from '../../log/logger' // Load logger\nimport loggerInfo from '../../log/logger-info'\nimport loggerAccess from '../../log/logger-access'\nimport { LogModel } from '../../log/log.model'\n\n// api\nexport const api = (req, res, next) => {\n  logger.info('Start ==================================================================================================================');\n  logger.info('validator something route url : ' + req.url);\n  logger.info('validator something route method : ' + req.method);\n\n  let bypass = ((req.url === '/authen' && req.method === 'POST') ||\n    (req.url === '/authen/social' && req.method === 'POST') ||\n    (req.url === '/authen/logout' && req.method === 'GET') ||\n    (req.url === '/user/register' && req.method === 'POST')\n  );\n\n  let authentication = () => {\n    if (bypass) {\n      next()\n    } else {\n      service.authenticationApi(req, (response) => {\n        if (response) {\n          let logModel = new LogModel();\n          logModel.setRequest(req);\n          loggerAccess.info(logModel.getAccessLog());\n          logModel.setResponse(response);\n          loggerInfo.info(logModel.getInfoLog());\n          res.status(response.httpCode).send(response)\n        } else {\n          next()\n        }\n      })\n    }\n  };\n\n  let connectionStatus = mongoose.connection.readyState;\n  if (connectionStatus === 0) {\n    let errMessage = 'Failed to connect to MongoDB';\n    logger.error(errMessage);\n    // Response.\n    let response = applicationUtils.genResponse(req.get('dc-language'), 'OB5000036', errMessage);\n    res.status(response.httpCode).send(response);\n  } else {\n    authentication()\n  }\n};\n\n// authorize\nexport const authorize = (req, res, next) => {\n  let logModel = new LogModel();\n  logModel.setRequest(req);\n  loggerAccess.info(logModel.getAccessLog());\n  let response = applicationUtils.genResponse(req.get('dc-language'), 'CM4040000', 'Not found');\n  logModel.setResponse(response);\n  loggerInfo.info(logModel.getInfoLog());\n  return res.status(response.httpCode).send(response)\n};\n"]}